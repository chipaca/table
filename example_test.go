package table_test

import (
	"io"
	"os"

	"github.com/chipaca/escapes"
	"github.com/chipaca/table"
)

var countryData = [][]interface{}{
	{"004", "AF", "Afghanistan", "Kabul"},
	{"248", "AX", "Ã…land Islands", "Mariehamn"},
	{"008", "AL", "Albania", "Tirana"},
	{"012", "DZ", "Algeria", "Algiers"},
	{"016", "AS", "American Samoa", "Pago Pago"},
	{"020", "AD", "Andorra", "Andorra la Vella"},
	{"024", "AO", "Angola", "Luanda"},
}

func ExampleNew() {
	t := table.New(escapes.Bold("numeric"), escapes.Bold("alpha-2"), escapes.Bold("name"), escapes.Bold("capital"))
	t.Outdent = "\u200b" // this is to trick go's example tests' overly aggressive whitespace trimming
	t.Align[0] = table.ColumnAlignRight
	for _, row := range countryData {
		t.Append(row...)
	}
	t.Print(os.Stdout)
	// Output:
	//  [1mnumeric[0m  [1malpha-2[0m  [1mname[0m            [1mcapital[0m          â€‹
	//      004  AF       Afghanistan     Kabul            â€‹
	//      248  AX       Ã…land Islands   Mariehamn        â€‹
	//      008  AL       Albania         Tirana           â€‹
	//      012  DZ       Algeria         Algiers          â€‹
	//      016  AS       American Samoa  Pago Pago        â€‹
	//      020  AD       Andorra         Andorra la Vella â€‹
	//      024  AO       Angola          Luanda           â€‹
}

func ExampleNewGHFMD() {
	t := table.NewGHFMD("numeric", "alpha-2", "name", "capital")
	t.Outdent = "\u200b" // this is to trick go's example tests' overly aggressive whitespace trimming
	t.Align[0] = table.ColumnAlignRight
	t.Align[2] = table.ColumnAlignCenter
	for _, row := range countryData {
		t.Append(row...)
	}
	t.Print(os.Stdout)
	// Output:
	// Â numericÂ |Â alpha-2Â |Â Â Â Â Â Â nameÂ Â Â Â Â Â |Â capitalÂ Â Â Â Â Â Â Â Â Â â€‹
	// --------:|---------|:--------------:|------------------â€‹
	// Â Â Â Â Â 004Â |Â AFÂ Â Â Â Â Â |Â Â AfghanistanÂ Â Â |Â KabulÂ Â Â Â Â Â Â Â Â Â Â Â â€‹
	// Â Â Â Â Â 248Â |Â AXÂ Â Â Â Â Â |Â Ã…land IslandsÂ Â |Â MariehamnÂ Â Â Â Â Â Â Â â€‹
	// Â Â Â Â Â 008Â |Â ALÂ Â Â Â Â Â |Â Â Â Â AlbaniaÂ Â Â Â Â |Â TiranaÂ Â Â Â Â Â Â Â Â Â Â â€‹
	// Â Â Â Â Â 012Â |Â DZÂ Â Â Â Â Â |Â Â Â Â AlgeriaÂ Â Â Â Â |Â AlgiersÂ Â Â Â Â Â Â Â Â Â â€‹
	// Â Â Â Â Â 016Â |Â ASÂ Â Â Â Â Â |Â American SamoaÂ |Â Pago PagoÂ Â Â Â Â Â Â Â â€‹
	// Â Â Â Â Â 020Â |Â ADÂ Â Â Â Â Â |Â Â Â Â AndorraÂ Â Â Â Â |Â Andorra la VellaÂ â€‹
	// Â Â Â Â Â 024Â |Â AOÂ Â Â Â Â Â |Â Â Â Â Â AngolaÂ Â Â Â Â |Â LuandaÂ Â Â Â Â Â Â Â Â Â Â â€‹
}

func ExampleNewGHFMD_BeginAndEnd() {
	t := table.NewGHFMD("numeric", "alpha-2", "name", "capital")
	t.Align[0] = table.ColumnAlignRight
	t.BeginRow = func(out io.Writer) {
		out.Write([]byte{'>'})
	}
	t.EndRow = func(out io.Writer) {
		out.Write([]byte{'<'})
	}
	for _, row := range countryData {
		t.Append(row...)
	}
	t.Print(os.Stdout)
	// Output:
	// >Â numericÂ |Â alpha-2Â |Â nameÂ Â Â Â Â Â Â Â Â Â Â |Â capitalÂ Â Â Â Â Â Â Â Â Â <
	// >--------:|---------|----------------|------------------<
	// >Â Â Â Â Â 004Â |Â AFÂ Â Â Â Â Â |Â AfghanistanÂ Â Â Â |Â KabulÂ Â Â Â Â Â Â Â Â Â Â Â <
	// >Â Â Â Â Â 248Â |Â AXÂ Â Â Â Â Â |Â Ã…land IslandsÂ Â |Â MariehamnÂ Â Â Â Â Â Â Â <
	// >Â Â Â Â Â 008Â |Â ALÂ Â Â Â Â Â |Â AlbaniaÂ Â Â Â Â Â Â Â |Â TiranaÂ Â Â Â Â Â Â Â Â Â Â <
	// >Â Â Â Â Â 012Â |Â DZÂ Â Â Â Â Â |Â AlgeriaÂ Â Â Â Â Â Â Â |Â AlgiersÂ Â Â Â Â Â Â Â Â Â <
	// >Â Â Â Â Â 016Â |Â ASÂ Â Â Â Â Â |Â American SamoaÂ |Â Pago PagoÂ Â Â Â Â Â Â Â <
	// >Â Â Â Â Â 020Â |Â ADÂ Â Â Â Â Â |Â AndorraÂ Â Â Â Â Â Â Â |Â Andorra la VellaÂ <
	// >Â Â Â Â Â 024Â |Â AOÂ Â Â Â Â Â |Â AngolaÂ Â Â Â Â Â Â Â Â |Â LuandaÂ Â Â Â Â Â Â Â Â Â Â <
}
